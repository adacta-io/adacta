version: 2.1

orbs:
  shellcheck: circleci/shellcheck@2.0.0
  docker: circleci/docker@1.4.0
  circleci-cli: circleci/circleci-cli@0.1.8

commands:
  rust-build:
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Version information
          command: |
            rustup --version
            rustc --version
            cargo --version
      - restore_cache:
          key: adacta-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Build"
          command: |
            cargo build --release --all --all-targets
      - save_cache:
          key: adacta-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - /usr/local/cargo/registry
            - ./target

  rust-check:
    steps:
      - attach_workspace:
          at: ~/project
      - restore_cache:
          key: adacta-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Check"
          command: |
            cargo check --all --all-targets

  rust-clippy:
    steps:
      - attach_workspace:
          at: ~/project
      - restore_cache:
          key: adacta-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Clippy"
          working_directory: ./backend
          command: |
            cargo clippy --all --all-targets -- -Dwarnings -Drust-2018-idioms \
              -A clippy::needless_return \
              -A clippy::module_name_repetitions \
              -A clippy::needless_lifetimes \
  
  rust-test:
    steps:
      - attach_workspace:
          at: ~/project
      - restore_cache:
          key: adacta-cargo-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: "Test"
          command: |
            cargo test --release --all --all-targets


jobs:
  checkout:
    docker:
      - image: circleci/circleci-cli
    working_directory: ~/project
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/project
          paths: ./*

  circleci-check:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - circleci-cli/install
      - run: |
          circleci config validate

  frontend-build:
    docker:
      - image: circleci/node:12
    working_directory: ~/project/frontend
    steps:
      - attach_workspace:
          at: ~/project
      - restore_cache:
          name: "Restore Cache - Node Modules"
          key: adacta-npm-{{ .Branch }}-{{ checksum "./package-lock.json" }}
      - run:
          name: "Install Node Modules"
          command: |
            npm install
      - save_cache:
          name: "Save Cache - Node Modules"
          key: adacta-npm-{{ .Branch }}-{{ checksum "./package-lock.json" }}
          paths:
            - ./frontend/node_modules
      - run:
          name: "Build"
          working_directory: ./frontend
          command: |
            npm run ng build --prod --aot
      - persist_to_workspace:
          root: ~/project
          paths: ./frontend/dist/adacta/*

  juicer-build:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project/juicer
    steps:
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run: docker build ./

  juicer-check-shell:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project/juicer
    steps:
      - attach_workspace:
          at: ~/project
      - shellcheck/install
      - shellcheck/check

  juicer-check-docker:
    docker:
      - image: cimg/node:current
    working_directory: ~/project/juicer
    steps:
      - attach_workspace:
          at: ~/project
      - run: |
          sudo npm install -g dockerlint
          dockerlint -p ./Dockerfile
      - run: |
          sudo npm install -g dockerfilelint
          dockerfilelint ./Dockerfile

  proto-build:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/proto
    steps:
      - rust-build

  proto-check:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/proto
    steps:
      - rust-check

  proto-clippy:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/proto
    steps:
      - rust-clippy

  proto-test:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/proto
    steps:
      - rust-test

  backend-build:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/backend
    steps:
      - rust-build
      - persist_to_workspace:
          root: ~/project/
          paths: ./backend/target/release/adacta
      - store_artifacts:
          path: ~/project/backend/target/release/adacta
          destination: "Adacata Backend"

  backend-check:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/backend
    steps:
      - rust-check

  backend-clippy:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/backend
    steps:
      - rust-clippy

  backend-test:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/backend
    steps:
      - setup_remote_docker
      - rust-test

  cli-build:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/cli
    steps:
      - rust-build
      - persist_to_workspace:
          root: ~/project
          paths: ./cli/target/release/adacta-cli
      - store_artifacts:
          path: ~/project/cli/target/release/adacta-cli
          destination: "Adacata CLI"

  cli-check:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/cli
    steps:
      - rust-check

  cli-clippy:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/cli
    steps:
      - rust-clippy

  cli-test:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/project/cli
    steps:
      - rust-test


workflows:
  commit:
    jobs:
      - checkout

      - circleci-check:
          requires:
            - checkout

      - frontend-build:
          requires:
            - checkout

      - juicer-build:
          requires:
            - checkout
      - juicer-check-shell:
          requires:
            - juicer-build
      - juicer-check-docker:
          requires:
            - juicer-build

      - proto-build:
          requires:
            - checkout
      - proto-check:
          requires:
            - proto-build
      - proto-clippy:
          requires:
            - proto-build
      - proto-test:
          requires:
            - proto-build

      - backend-build:
          requires:
            - checkout
            - frontend-build
            - proto-build
      - backend-check:
          requires:
            - backend-build
      - backend-clippy:
          requires:
            - backend-build
      - backend-test:
          requires:
            - juicer-build
            - backend-build

      - cli-build:
          requires:
            - checkout
            - proto-build
      - cli-check:
          requires:
            - cli-build
      - cli-clippy:
          requires:
            - cli-build
      - cli-test:
          requires:
            - cli-build
